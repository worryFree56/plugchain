(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{456:function(e,s,a){"use strict";a.r(s);var t=a(57),o=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"gas-and-fees"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gas-and-fees"}},[e._v("#")]),e._v(" Gas and Fees")]),e._v(" "),a("p",[e._v('Learn the difference between "Gas" and "Fees" in PVM and Cosmos.')]),e._v(" "),a("h2",{attrs:{id:"introducing-gas-and-fees"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#introducing-gas-and-fees"}},[e._v("#")]),e._v(" Introducing "),a("code",[e._v("Gas")]),e._v(" and "),a("code",[e._v("Fees")])]),e._v(" "),a("p",[e._v("In the Cosmos SDK, "),a("code",[e._v("gas")]),e._v(" is a special unit used to track resource consumption during execution. "),a("code",[e._v("gas")]),e._v(" is normally consumed when reading and writing to storage, but it can also be consumed if expensive computations are required. It has two main purposes:")]),e._v(" "),a("ul",[a("li",[e._v("Make sure the block doesn't consume too many resources and will be finalized.")]),e._v(" "),a("li",[e._v("Prevent spam and abuse by end users. To this end, "),a("code",[e._v("gas")]),e._v(" consumed during the execution of "),a("code",[e._v("Msg")]),e._v(" is usually priced, resulting in "),a("code",[e._v("fee")]),e._v(" ("),a("code",[e._v("fees = gas * gas-prices")]),e._v("). "),a("code",[e._v("fees")]),e._v(" must generally be paid by the sender executing the "),a("code",[e._v("Msg")]),e._v('. Note that the Cosmos SDK does not enforce "gas" pricing by default, as there may be other ways to prevent spam (such as bandwidth schemes). Nonetheless, most applications will implement a "fee" mechanism to prevent spam.')])]),e._v(" "),a("h2",{attrs:{id:"cosmos-sdk-fees"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cosmos-sdk-fees"}},[e._v("#")]),e._v(" Cosmos SDK "),a("code",[e._v("Fees")])]),e._v(" "),a("ul",[a("li",[e._v("Verify that the gas price offered by the transaction is higher than the local "),a("code",[e._v("min-gas-prices")]),e._v(". "),a("code",[e._v("min-gas-prices")]),e._v(" is a local parameter for each full node and is used during "),a("code",[e._v("CheckTx")]),e._v(" to discard transactions that do not offer minimum fees. This ensures that the mempool is not spammed by spam transactions.")]),e._v(" "),a("li",[e._v("EQ: "),a("code",[e._v("fees = gas * gas-price")])]),e._v(" "),a("li",[e._v("For example: "),a("code",[e._v("gas=200000")]),e._v(" (default), "),a("code",[e._v("gas-price=0.0001")]),e._v(", "),a("code",[e._v("fees=20uplugcn")])])]),e._v(" "),a("h2",{attrs:{id:"pvm-fees"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pvm-fees"}},[e._v("#")]),e._v(" PVM "),a("code",[e._v("Fees")])]),e._v(" "),a("p",[e._v("The main difference between PVM and Cosmos state transitions is that PVM uses a "),a("a",{attrs:{href:"https://github.com/ethereum/go-ethereum/blob/master/params/protocol_params.go",target:"_blank",rel:"noopener noreferrer"}},[e._v("gas table"),a("OutboundLink")],1),e._v(' for each OPCODE, while Cosmos Use "GasConfig" to charge gas for each CRUD operation by setting the unit of access to the database and the cost per byte.')]),e._v(" "),a("p",[e._v("The gas usage of PVM and EVM is calculated in the same way, but the PVM "),a("code",[e._v("gas")]),e._v(" usage is different from the EVM "),a("code",[e._v("gas")]),e._v(" usage process. When the gas is enough to pay the transaction, the excess gas will be returned. PVM fee gas will not be returned.")]),e._v(" "),a("ul",[a("li",[e._v("PVM transactions must first meet the minimum handling fee required by "),a("code",[e._v("fees")]),e._v(" greater than Cosmos SDK"),a("code",[e._v("(currently the minimum handling fee is 0.0001*200000=20uplugcn)")])]),e._v(" "),a("li",[e._v("The gas provided by the transaction should be greater than or equal to the gas sum calculated according to the "),a("a",{attrs:{href:"https://github.com/ethereum/go-ethereum/blob/master/params",target:"_blank",rel:"noopener noreferrer"}},[e._v("gas table"),a("OutboundLink")],1),e._v(" transaction bytes /protocol_params.go)")]),e._v(" "),a("li",[e._v("Minimum gasPrice is "),a("code",[e._v("7")])]),e._v(" "),a("li",[e._v("EQ: fees = "),a("code",[e._v("math.Ceil( (gas*gasPrice) / 1000 )")]),e._v(" (Proposal "),a("a",{attrs:{href:"https://www.plugchain.network/v2/communityDetail?id=9",target:"_blank",rel:"noopener noreferrer"}},[e._v("v1.5.0"),a("OutboundLink")],1),e._v(" algorithm after upgrade)")]),e._v(" "),a("li",[e._v("For example: "),a("code",[e._v("gas=654321")]),e._v(","),a("code",[e._v("gasPrice=7")]),e._v(","),a("code",[e._v("fees=4581uplugcn")])])])])}),[],!1,null,null,null);s.default=o.exports}}]);