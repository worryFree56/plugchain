(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{440:function(e,t,a){"use strict";a.r(t);var s=a(57),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"keys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keys"}},[e._v("#")]),e._v(" Keys")]),e._v(" "),a("p",[e._v("Keys allows you to manage your local tendermint keystore (wallets) for plug.")]),e._v(" "),a("h2",{attrs:{id:"available-commands"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#available-commands"}},[e._v("#")]),e._v(" Available Commands")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Name")]),e._v(" "),a("th",[e._v("Description")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[a("a",{attrs:{href:"#plugchaind-keys-add"}},[e._v("add")])]),e._v(" "),a("td",[e._v("Add an encrypted private key (either newly generated or recovered), encrypt it, and save to disk")])]),e._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"#plugchaind-keys-delete"}},[e._v("delete")])]),e._v(" "),a("td",[e._v("Delete the given key")])]),e._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"#plugchaind-keys-export"}},[e._v("export")])]),e._v(" "),a("td",[e._v("Export private keys")])]),e._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"#plugchaind-keys-import"}},[e._v("import")])]),e._v(" "),a("td",[e._v("Import private keys into the local keybase")])]),e._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"#plugchaind-keys-list"}},[e._v("list")])]),e._v(" "),a("td",[e._v("List all keys")])]),e._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"#plugchaind-keys-migrate"}},[e._v("migrate")])]),e._v(" "),a("td",[e._v("Migrate keys from the legacy (db-based) Keybase")])]),e._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"#plugchaind-keys-mnemonic"}},[e._v("mnemonic")])]),e._v(" "),a("td",[e._v("Compute the bip39 mnemonic for some input entropy")])]),e._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"#plugchaind-keys-parse"}},[e._v("parse")])]),e._v(" "),a("td",[e._v("Parse address from hex to bech32 and vice versa")])]),e._v(" "),a("tr",[a("td",[a("a",{attrs:{href:"#plugchaind-keys-show"}},[e._v("show")])]),e._v(" "),a("td",[e._v("Retrieve key information by name or address")])])])]),e._v(" "),a("h2",{attrs:{id:"plugchaind-keys-add"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-keys-add"}},[e._v("#")]),e._v(" plugchaind keys add")]),e._v(" "),a("p",[e._v("Derive a new private key and encrypt to disk.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("plugchaind keys "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("key-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),a("p",[a("strong",[e._v("Flags:")])]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Name, shorthand")]),e._v(" "),a("th",[e._v("Default")]),e._v(" "),a("th",[e._v("Description")]),e._v(" "),a("th",[e._v("Required")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("--multisig")]),e._v(" "),a("td"),e._v(" "),a("td",[e._v("Construct and store a multisig public key")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("--multisig-threshold")]),e._v(" "),a("td",[e._v("1")]),e._v(" "),a("td",[e._v("K out of N required signatures")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("--nosort")]),e._v(" "),a("td",[e._v("false")]),e._v(" "),a("td",[e._v("Keys passed to --multisig are taken in the order they're supplied")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("--pubkey")]),e._v(" "),a("td"),e._v(" "),a("td",[e._v("Parse a public key in bech32 format and save it to disk")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("--interactive")]),e._v(" "),a("td",[e._v("false")]),e._v(" "),a("td",[e._v("Interactively prompt user for BIP39 passphrase and mnemonic")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("--ledger")]),e._v(" "),a("td",[e._v("false")]),e._v(" "),a("td",[e._v("Store a local reference to a private key on a Ledger device")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("--recover")]),e._v(" "),a("td",[e._v("false")]),e._v(" "),a("td",[e._v("Provide seed phrase to recover existing key instead of creating")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("--no-backup")]),e._v(" "),a("td",[e._v("false")]),e._v(" "),a("td",[e._v("Don't print out seed phrase (if others are watching the terminal)")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("--dry-run")]),e._v(" "),a("td",[e._v("false")]),e._v(" "),a("td",[e._v("Perform action, but don't add key to local keystore")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("--hd-path")]),e._v(" "),a("td"),e._v(" "),a("td",[e._v("Manual HD Path derivation (overrides BIP44 config)")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("--coin-type")]),e._v(" "),a("td",[e._v("118")]),e._v(" "),a("td",[e._v("coin type number for HD derivation")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("--account")]),e._v(" "),a("td",[e._v("0")]),e._v(" "),a("td",[e._v("Account number for HD derivation")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("--index")]),e._v(" "),a("td",[e._v("0")]),e._v(" "),a("td",[e._v("Address index number for HD derivation")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("--algo")]),e._v(" "),a("td",[e._v("secp256k")]),e._v(" "),a("td",[e._v("Key signing algorithm to generate keys for")]),e._v(" "),a("td")])])]),e._v(" "),a("h3",{attrs:{id:"create-a-new-key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-a-new-key"}},[e._v("#")]),e._v(" Create a new key")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("plugchaind keys "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" MyKey\n")])])]),a("p",[e._v("Enter and repeat the password, at least 8 characters, then you will get a new key.")]),e._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),a("p",[a("strong",[e._v("Important")])]),e._v(" "),a("p",[e._v("write the seed phrase in a safe place! It is the only way to recover your account if you ever forget your password.")])]),e._v(" "),a("h3",{attrs:{id:"recover-an-existing-key-from-seed-phrase"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#recover-an-existing-key-from-seed-phrase"}},[e._v("#")]),e._v(" Recover an existing key from seed phrase")]),e._v(" "),a("p",[e._v("If you forget your password or lose your key, or you wanna use your key in another place, you can recover your key by your seed phrase.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("plugchaind keys "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" MyKey --recover\n")])])]),a("p",[e._v("You'll be asked to enter and repeat the new password for your key, and enter the seed phrase. Then you get your key back.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("Enter a passphrase "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("for")]),e._v(" your key:\nRepeat the passphrase:\nEnter your recovery seed phrase:\n")])])]),a("h3",{attrs:{id:"create-a-multisig-key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-a-multisig-key"}},[e._v("#")]),e._v(" Create a multisig key")]),e._v(" "),a("p",[e._v("The following example creates a multisig key with 3 sub-keys, and specify the minimum number of signatures as 2. The tx could be broadcast only when the number of signatures is greater than or equal to 2.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("plugchaind keys "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("multisig-keyname"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --multisig-threshold"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v(" --multisig"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("signer-keyname-"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[e._v("1")]),e._v(">")]),e._v(","),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("signer-keyname-"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[e._v("2")]),e._v(">")]),e._v(","),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("signer-keyname-"),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[e._v("3")]),e._v(">")]),e._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[a("code",[e._v("<signer-keyname>")]),e._v(' can be the type of "local/offline/ledger", but not "multi" type.')]),e._v(" "),a("p",[e._v("If you don't have all the permission of sub-keys, you can ask for the pubkeys to create the offline keys first, then you will be able to create the multisig key.")]),e._v(" "),a("p",[e._v('Offline key can be created by "plugchaind keys add --pubkey".')])]),e._v(" "),a("p",[e._v("How to use multisig key to sign and broadcast a transaction,  please refer to "),a("RouterLink",{attrs:{to:"/cli-client/tx.html#plugchaind-tx-multisign"}},[e._v("multisign")])],1),e._v(" "),a("h2",{attrs:{id:"plugchaind-keys-delete"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-keys-delete"}},[e._v("#")]),e._v(" plugchaind keys delete")]),e._v(" "),a("p",[e._v("Delete a local key by the given name.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("plugchaind keys delete "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("key-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),a("p",[a("strong",[e._v("Flags:")])]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Name, shorthand")]),e._v(" "),a("th",[e._v("Default")]),e._v(" "),a("th",[e._v("Description")]),e._v(" "),a("th",[e._v("Required")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("--force, -f")]),e._v(" "),a("td",[e._v("false")]),e._v(" "),a("td",[e._v("Remove the key unconditionally without asking for the passphrase")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("--yes, -y")]),e._v(" "),a("td",[e._v("false")]),e._v(" "),a("td",[e._v("Skip confirmation prompt when deleting offline or ledger key references")]),e._v(" "),a("td")])])]),e._v(" "),a("h3",{attrs:{id:"delete-a-local-key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delete-a-local-key"}},[e._v("#")]),e._v(" Delete a local key")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("plugchaind keys delete MyKey\n")])])]),a("h2",{attrs:{id:"plugchaind-keys-export"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-keys-export"}},[e._v("#")]),e._v(" plugchaind keys export")]),e._v(" "),a("p",[e._v("Export the keystore of a key to a json file")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("plugchaind keys "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("key-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),a("h3",{attrs:{id:"export-keystore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#export-keystore"}},[e._v("#")]),e._v(" Export keystore")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("plugchaind keys "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" Mykey --output-file"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("path-to-keystore"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])]),a("h2",{attrs:{id:"plugchaind-keys-import"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-keys-import"}},[e._v("#")]),e._v(" plugchaind keys import")]),e._v(" "),a("p",[e._v("Import a ASCII armored private key into the local keybase.")]),e._v(" "),a("h3",{attrs:{id:"import-a-ascii-armored-private-key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#import-a-ascii-armored-private-key"}},[e._v("#")]),e._v(" Import a ASCII armored private key")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("plugchaind keys "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("import")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("keyfile"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),a("h2",{attrs:{id:"plugchaind-keys-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-keys-list"}},[e._v("#")]),e._v(" plugchaind keys list")]),e._v(" "),a("p",[e._v("List all the keys stored by this key manager along with their associated name, type, address and pubkey.")]),e._v(" "),a("p",[a("strong",[e._v("Flags:")])]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Name, shorthand")]),e._v(" "),a("th",[e._v("Default")]),e._v(" "),a("th",[e._v("Description")]),e._v(" "),a("th",[e._v("Required")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("--list-name")]),e._v(" "),a("td"),e._v(" "),a("td",[e._v("List names only")]),e._v(" "),a("td")])])]),e._v(" "),a("h3",{attrs:{id:"list-all-keys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list-all-keys"}},[e._v("#")]),e._v(" List all keys")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("plugchaind keys list\n")])])]),a("h2",{attrs:{id:"plugchaind-keys-migrate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-keys-migrate"}},[e._v("#")]),e._v(" plugchaind keys migrate")]),e._v(" "),a("p",[e._v("Migrate key information from the legacy (db-based) Keybase to the new keyring-based Keybase.")]),e._v(" "),a("p",[a("strong",[e._v("Flags:")])]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Name, shorthand")]),e._v(" "),a("th",[e._v("Default")]),e._v(" "),a("th",[e._v("Description")]),e._v(" "),a("th",[e._v("Required")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("--dry-run")]),e._v(" "),a("td"),e._v(" "),a("td",[e._v("Run migration without actually persisting any changes to the new Keybase")]),e._v(" "),a("td")])])]),e._v(" "),a("h3",{attrs:{id:"migrate-key-information"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#migrate-key-information"}},[e._v("#")]),e._v(" Migrate key information")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("plugchaind keys migrate "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),a("h2",{attrs:{id:"plugchaind-keys-mnemonic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-keys-mnemonic"}},[e._v("#")]),e._v(" plugchaind keys mnemonic")]),e._v(" "),a("p",[e._v("Create a bip39 mnemonic, sometimes called a seed phrase, by reading from the system entropy. To pass your own entropy, use "),a("code",[e._v("unsafe-entropy")]),e._v(" mode.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("plugchaind keys mnemonic "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),a("p",[a("strong",[e._v("Flags:")])]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Name, shorthand")]),e._v(" "),a("th",[e._v("Default")]),e._v(" "),a("th",[e._v("Description")]),e._v(" "),a("th",[e._v("Required")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("--unsafe-entropy")]),e._v(" "),a("td"),e._v(" "),a("td",[e._v("Prompt the user to supply their own entropy, instead of relying on the system")]),e._v(" "),a("td")])])]),e._v(" "),a("h3",{attrs:{id:"create-a-bip39-mnemonic"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-a-bip39-mnemonic"}},[e._v("#")]),e._v(" Create a bip39 mnemonic")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("plugchaind keys mnemonic\n")])])]),a("p",[e._v("You'll get a bip39 mnemonic with 24 words, e.g.:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("beauty entire blue tape ordinary fix rotate learn smart tiger dolphin cycle cigar dish alcohol slab bachelor vital design consider paper panther mad eternal\n")])])]),a("h2",{attrs:{id:"plugchaind-keys-parse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-keys-parse"}},[e._v("#")]),e._v(" plugchaind keys parse")]),e._v(" "),a("p",[e._v("Convert and print to stdout key addresses and fingerprints from hexadecimal into bech32 cosmos prefixed format and vice versa.")]),e._v(" "),a("h3",{attrs:{id:"convert-and-print-to-stdout-key-addresses-and-fingerprints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#convert-and-print-to-stdout-key-addresses-and-fingerprints"}},[e._v("#")]),e._v(" Convert and print to stdout key addresses and fingerprints")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("plugchaind keys parse "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("hex-or-bech32-address"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),a("h2",{attrs:{id:"plugchaind-keys-show"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#plugchaind-keys-show"}},[e._v("#")]),e._v(" plugchaind keys show")]),e._v(" "),a("p",[e._v("Get details of a local key.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("plugchaind keys show "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("key-name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),a("p",[a("strong",[e._v("Flags:")])]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("Name, shorthand")]),e._v(" "),a("th",[e._v("Default")]),e._v(" "),a("th",[e._v("Description")]),e._v(" "),a("th",[e._v("Required")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("--address")]),e._v(" "),a("td",[e._v("false")]),e._v(" "),a("td",[e._v("Output the address only (overrides --output)")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("--bech")]),e._v(" "),a("td",[e._v("acc")]),e._v(" "),a("td",[e._v("The Bech32 prefix encoding for a key (acc/val/cons)")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("--device")]),e._v(" "),a("td",[e._v("false")]),e._v(" "),a("td",[e._v("Output the address in a ledger device")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("--multisig-threshold")]),e._v(" "),a("td",[e._v("1")]),e._v(" "),a("td",[e._v("K out of N required signatures")]),e._v(" "),a("td")]),e._v(" "),a("tr",[a("td",[e._v("--pubkey")]),e._v(" "),a("td",[e._v("false")]),e._v(" "),a("td",[e._v("Output the public key only (overrides --output)")]),e._v(" "),a("td")])])]),e._v(" "),a("h3",{attrs:{id:"get-details-of-a-local-key"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-details-of-a-local-key"}},[e._v("#")]),e._v(" Get details of a local key")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("plugchaind keys show MyKey\n")])])]),a("p",[e._v("The following infos will be shown:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("- name: Mykey\n  type: "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("local")]),e._v("\n  address: gx1tulwx2hwz4dv8te6cflhda64dn0984harlzegw\n  pubkey: gxpub1addwnpepq24rufap6u0sysqcpgsfzqhw3x8nfkhqhtmpgqt0369rlyqcg0vkgwzc4k0\n  mnemonic: "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('""')]),e._v("\n  threshold: "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n  pubkeys: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])]),a("h3",{attrs:{id:"get-validator-operator-address"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-validator-operator-address"}},[e._v("#")]),e._v(" Get validator operator address")]),e._v(" "),a("p",[e._v("If an address has been bonded to be a validator operator (which the address you used to create a validator), then you can use "),a("code",[e._v("--bech val")]),e._v(" to get the operator's address prefixed by "),a("code",[e._v("gxvaloper")]),e._v(" and the pubkey prefixed by "),a("code",[e._v("gxvaloperpub")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("plugchaind keys show MyKey --bech val\n")])])]),a("p",[e._v("Example Output:")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[e._v("- name: Mykey\n  type: "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("local")]),e._v("\n  address: gxvaloper1tulwx2hwz4dv8te6cflhda64dn0984hakwgk4f\n  pubkey: gxvaloperpub1addwnpepq24rufap6u0sysqcpgsfzqhw3x8nfkhqhtmpgqt0369rlyqcg0vkgd8e6zy\n  mnemonic: "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('""')]),e._v("\n  threshold: "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n  pubkeys: "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);